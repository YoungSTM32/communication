%理想传输系统收发实验仿真%clear allclose allclc%TRANSMITTER% encode text string as T-spaced (T间距) PAM (+/-1, +/-3) sequencesendmessage='1234567890 This is an ideal system test! ABCDEFGHIJK';m=ascii2pam4(sendmessage);N=length(m);    % 4-level signal of length N% zero pad T-spaced symbol sequence to create upsampled T/M-spaced% sequence of scaled T-spaced pulses (with T = 1 time unit)M=100; mup=zeros(1,N*M); mup(1:M:end)=m; % oversampling factor% Hamming pulse filter with T/M-spaced impulse responsep=hamming(M);                       % blip pulse of width Mplot(1:1:100,p);x=filter(p,1,mup);                  % convolve pulse shape with datafigure(1), plotspec(x,1/M)          % baseband signal spectrum% am modulationt=1/M:1/M:length(x)/M;              % T/M-spaced time vectorfc=20;                              % carrier frequencyc=cos(2*pi*fc*t);                   % carrierr=c.*x;                             % modulate message with carrier%RECEIVER% am demodulation of received signal sequence rc2=cos(2*pi*fc*t);                   % synchronized cosine for mixingx2=r.*c2;                            % demod received signalfl=50;                               % LPF lengthfbe=[0 0.1 0.2 1]; damps=[1 1 0 0 ]; % design of LPF parametersb=remez(fl,fbe,damps);               % create LPF impulse responsex3=2*filter(b,1,x2);                 % LPF and scale downconverted signal% extract upsampled pulses using correlation implemented as a convolving filtery=filter(fliplr(p)/(pow(p)*M),1,x3); % filter rec'd sig with pulse; normalize% set delay to first symbol-sample and increment by Mz=y(0.5*fl+M:M:end);                 % downsample to symbol ratefigure(2), plot([1:length(z)],z,'.') % soft decisions% decision device and symbol matching performance assessmentmprime=quantalph(z,[-3,-1,1,3])';    % quantize to +/-1 and +/-3 alphabetcluster_variance=(mprime-z)*(mprime-z)'/length(mprime), % cluster variancelmp=length(mprime);percentage_symbol_errors=100*sum(abs(sign(mprime-m(1:lmp))))/lmp, % symb err% decode decision device output to text stringreconstructed_message=pam2ascii(mprime);      % reconstruct messagesendmessagereconstructed_message