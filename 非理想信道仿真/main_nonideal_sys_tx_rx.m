 % 非理想系统下的通信仿真测试clear allclose allclfcng=input('输入信道噪声增益，可以输入0~2之间的一个小数，回车键结束输入: 试试 0, 0.6 or 2 :: '); if isempty(cng) cng = 0.5;endcdi=input('输入多径干扰: 0 没有多径干扰, 1 中等干扰 ， 2 严重干扰 ::  ');if isempty(cdi) cdi = 0;endfo=input('输入发射机混频器的频偏（%）:   0 或者 0.01 ::  '); if isempty(fo) fo = 0;endpo=input('输入发射机混频器的相位偏移（用弧度表示）: 试试 0, 0.7 or 0.9 ::  ');if isempty(po) po = 0;endtoper=input('输入采样延迟（一个符号周期的百分比 %）: 试试 0, 20 or 30 ::  ');if isempty(toper) toper = 0;endso=input('接收机符号定时偏移: 试试 0 or 1 ::  ');if isempty(so) so = 0; endaa=zeros(1,1000);for i=1:1000    SN = i/2000;%TRANSMITTER% encode text string as T-spaced PAM (+/-1, +/-3) sequencesendmesage = '123 Communication test for non-ideal channel, lalala~~~ 4567890';m=ascii2pam(sendmesage); N=length(m);        % 4-level signal of length N% zero pad T-spaced symbol sequence to create upsampled T/M-spaced%      sequence of scaled T-spaced pulses (with T = 1 time unit)M=100-so; mup=zeros(1,N*M); mup(1:M:end)=m; % oversample by M >=8% Hamming pulse filter with T/M-spaced impulse responsep=hamming(M);                 % blip pulse of width M% pulse filter output  x=filter(p,1,mup);            % convolve pulse shape with data% figure(1), plotspec(x,1/M)    % baseband signal spectrum% am modulationt=1/M:1/M:length(x)/M;        % T/M-spaced time vectorfc=20;                        % carrier frequencyc=cos(2*pi*(fc*(1+0.01*fo))*t+po); % carrier with offsets relative to rec oscr=c.*x;                       % modulate message with carriercng=sqrt(pow(r)/SN);%CHANNELif cdi < 0.5,                  % channel ISI  mc=[1 0 0];                  % distortion-free channelelseif cdi<1.5,  mc=[1 zeros(1,M) 0.28 zeros(1,floor(2.3*M)) 0.11]; % mild multipath channel  else  mc=[1 zeros(1,M) 0.28 zeros(1,floor(1.8*M)) 0.44]; % harsh multipath channel  endmc=mc/(sqrt(mc*mc'));          % normalize channel powerdv=filter(mc,1,r);% filter transmitted signal through channelgau=cng*(randn(size(dv)));nv=dv+gau;   % add Gaussian channel noiseto=floor(0.01*toper*M);        % fractional period delay in  samplerrnv=nv(1+to:end);              % delay in on-symbol designationrt=(1+to)/M:1/M:length(nv)/M;  % modified time vector with delayed message start rM=M+so;                       % receiver sampler timing offset (delay)%RECEIVER% am demodulation of received signal sequence c2=cos(2*pi*fc*rt);                   % create synchronized cosine for mixingx2=rnv.*c2;                           % demod received signalfl=floor(50);                         % LPF lengthfbe=[0 0.1 0.2 1]; damps=[1 1 0 0 ];  % design of LPF parametersb=remez(fl,fbe,damps);                % calculation of LPF impulse responsex3=2*filter(b,1,x2);                  % LPF and scale downconverted signal% extract upsampled pulses using correlation implemented as a convolving filterrp=hamming(rM);                           % receiver defined pulse shapey=filter(fliplr(rp)/(pow(rp)*rM),1,x3);   % filter rec'd sig with normalized pulse% figure(2), ul1=floor((length(x3)-124)/(4*rM)); % plot(reshape(x3(125:ul1*4*rM+124),4*rM,ul1)) % plot the eye diagram% figure(3), ul=floor((length(y)-124)/(4*rM)); % plot(reshape(y(125:ul*4*rM+124),4*rM,ul)) % plot the eye diagram% figure(4),plotspec(x3,M);% figure(5),plotspec(y,M);% downsample to symbol rate z=y(0.5*fl+rM:rM+so:end);  % set delay to first symbol-sample and increment by M% figure(6), plot([1:length(z)],z,'.')      % soft decisions% decision device and symbol matching performance assessmentmprime=quantalph(z,[-3,-1,1,3])';         % quantize to +/-1 and +/-3 alphabetcluster_variance=(mprime-z)*(mprime-z)'/length(mprime),     % cluster variancelmp=length(mprime);   % number of recovered symbol estimatespercentage_symbol_errors=100*sum(abs(sign(mprime-m(1:lmp))))/lmp,% symb erraa(i)=percentage_symbol_errors;endn = 1:1000;n=n/2000;plot(n,aa);xlabel('信噪比')ylabel('误码率%')% decode decision device output to text stringreconstructed_message=pam2ascii(mprime); % reconstruct messagesendmesagereconstructed_message